<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
  <title>TLD66 Data Analytics Dashboard</title>

  <!-- Bootstrap & Chart.js & html2pdf -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <!-- TensorFlow.js -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>

  <style>
    body { background:#f4f7fa; font-family:sans-serif }
    .stat-card { background:#fff;padding:1rem;border-radius:.5rem;box-shadow:0 2px 8px rgba(0,0,0,.1);margin-bottom:1rem }
    .prediction-box { background:#e2e6ea;padding:.75rem;border-radius:.5rem;margin:.25rem;flex:1;min-width:120px;text-align:center }
    .update-notif { position:fixed;bottom:1rem;right:1rem;background:#28a745;color:#fff;padding:.5rem 1rem;border-radius:.25rem;animation:slideIn .5s }
    @keyframes slideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}
  </style>
</head>
<body>
  <div class="container my-4">

    <!-- HEADER -->
    <div class="text-center mb-4">
      <img src="img/Logo1.png" alt="Logo" style="height:60px" class="mb-2"/>
      <h1>TLD66 Data Analytics Dashboard</h1>
      <p>D·ªØ li·ªáu c·∫≠p nh·∫≠t m·ªói 60s. Vui l√≤ng ƒë·ª£i...</p>
      <button id="exportPDF" class="btn btn-success me-2">Export PDF</button>
      <button id="openFiles" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#filesModal">Query Drive</button>
    </div>

    <!-- FILES MODAL -->
    <div class="modal fade" id="filesModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Drive File List</h5>
            <button class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="row g-3 mb-3">
              <div class="col">
                <input type="date" id="fileStart" class="form-control" placeholder="From"/>
              </div>
              <div class="col">
                <input type="date" id="fileEnd" class="form-control" placeholder="To"/>
              </div>
              <div class="col-auto">
                <button class="btn btn-success" onclick="filterFilesByDate()">Filter</button>
              </div>
            </div>
            <div id="filesList">ƒêang t·∫£i danh s√°ch...</div>
          </div>
        </div>
      </div>
    </div>

    <!-- FILTER DATA -->
    <div class="bg-light p-3 rounded mb-4">
      <div class="row g-3">
        <div class="col-md-4">
          <label>T·ª´ ng√†y:</label>
          <input type="date" id="dataStart" class="form-control"/>
        </div>
        <div class="col-md-4">
          <label>ƒê·∫øn ng√†y:</label>
          <input type="date" id="dataEnd" class="form-control"/>
        </div>
        <div class="col-md-4 d-flex align-items-end">
          <button class="btn btn-success w-100" onclick="applyFilters()">√Åp d·ª•ng</button>
        </div>
      </div>
    </div>

    <!-- STATISTICS CARDS -->
    <div class="row">
      <div class="col-md-4">
        <div class="stat-card">
          <h5>Nhi·ªát ƒë·ªô (¬∞C)</h5>
          <div>Avg: <span id="tempAvg">0</span></div>
          <div>Min: <span id="tempMin">0</span></div>
          <div>Max: <span id="tempMax">0</span></div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h5>ƒê·ªô ·∫©m (%)</h5>
          <div>Avg: <span id="humAvg">0</span></div>
          <div>Min: <span id="humMin">0</span></div>
          <div>Max: <span id="humMax">0</span></div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h5>CO‚ÇÇ (ppm)</h5>
          <div>Avg: <span id="co2Avg">0</span></div>
          <div>Min: <span id="co2Min">0</span></div>
          <div>Max: <span id="co2Max">0</span></div>
        </div>
      </div>
    </div>

    <!-- PREDICTION -->
    <div class="stat-card d-flex flex-wrap">
      <h5 class="w-100">D·ª± b√°o b∆∞·ªõc ti·∫øp theo</h5>
      <div id="predictionResult" class="d-flex flex-wrap w-100"></div>
    </div>

    <!-- DATA TABLE -->
    <div class="table-responsive table-wrapper mb-4">
      <table class="table table-striped">
        <thead class="table-dark">
          <tr>
            <th>No</th><th>Ng√†y</th><th>Gi·ªù</th>
            <th>Temp (¬∞C)</th><th>Hum (%)</th><th>CO (ppm)</th>
            <th>PM2.5</th><th>PM10</th><th>CO‚ÇÇ</th>
          </tr>
        </thead>
        <tbody id="dataTable"></tbody>
      </table>
      <div id="errMsg" class="text-danger text-center"></div>
    </div>

    <!-- CHARTS -->
    <div class="chart-container mb-5">
      <div class="row">
        <div class="col-md-6"><canvas id="chartTemp"></canvas></div>
        <div class="col-md-6"><canvas id="chartHum"></canvas></div>
        <div class="col-md-6"><canvas id="chartCO2"></canvas></div>
        <div class="col-md-6"><canvas id="chartPM25"></canvas></div>
      </div>
    </div>
  </div>

  <script>
  // üëâ C·∫§U H√åNH
  const sheetId = '1oOeN-HUb_xZfcIiY0d06MXUGL0-vsJW5r-zNa_NIKe4';
  const apiKey  = 'AIzaSyAFLByP7yNm_HMSO8sTyWjAXxwVrcXNoXw';
  const folderId= '1Q2-Ld0PElM0xwMEDdclNhmk7Uhoo8xpe';
  let originalData = [], driveFiles = [];

  // 1) FETCH t·ª´ Google Sheets
  async function fetchData(){
    try {
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/Sheet1!A:I?key=${apiKey}`;
      const res = await fetch(url);
      const json = await res.json();
      if(!json.values) throw 'No data';
      // B·ªè header, l∆∞u to√†n b·ªô
      originalData = json.values.slice(1);
      renderAll(originalData);
      showNotif('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
    } catch(e){
      document.getElementById('errMsg').innerText='Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu';
      console.error(e);
    }
  }

  // 2) RENDER TABLE, STATS, CHARTS, LSTM
  function renderAll(data){
    renderTable(data);
    renderStats(data);
    renderCharts(data);
    runLSTM(data);
  }

  function renderTable(data){
    const tbody= document.getElementById('dataTable');
    tbody.innerHTML='';
    data.slice(-12).forEach((r,i)=>{
      const [ts,date,time,temp,hum,co,pm25,pm10,co2]=r;
      tbody.insertAdjacentHTML('beforeend',`
        <tr>
          <td>${i+1}</td>
          <td>${date}</td><td>${time}</td>
          <td>${temp}</td><td>${hum}</td><td>${co}</td>
          <td>${pm25}</td><td>${pm10||'N/A'}</td><td>${co2||'N/A'}</td>
        </tr>`);
    });
  }

  function renderStats(data){
    const arr = (i)=> data.slice(-12).map(r=>parseFloat(r[i])||0);
    const set = (id, a)=> {
      document.getElementById(id+'Avg').innerText = avg(a).toFixed(2);
      document.getElementById(id+'Min').innerText = Math.min(...a).toFixed(2);
      document.getElementById(id+'Max').innerText = Math.max(...a).toFixed(2);
    };
    set('temp', arr(3));
    set('hum',  arr(4));
    set('co2',  arr(8));
  }

  function renderCharts(data){
    const slice12 = data.slice(-12);
    const labels= slice12.map(r=>r[1]+' '+r[2]);
    const series= (i)=> slice12.map(r=>parseFloat(r[i])||0);

    new Chart('chartTemp',{type:'line',data:{labels,datasets:[{label:'Temp',data:series(3),fill:false}]}});
    new Chart('chartHum',{type:'line',data:{labels,datasets:[{label:'Hum',data:series(4),fill:false}]}});
    new Chart('chartCO2',{type:'line',data:{labels,datasets:[{label:'CO‚ÇÇ',data:series(8),fill:false}]}});
    new Chart('chartPM25',{type:'line',data:{labels,datasets:[{label:'PM2.5',data:series(6),fill:false}]}});
  }

  function avg(a){ return a.reduce((s,v)=>s+v,0)/a.length; }

  // 3) LSTM forecasting
  const W=5, F=6; // window & features
  let lstm;
  function prepare(data){
    const X=[],Y=[];
    for(let i=0;i+W<data.length;i++){
      X.push(data.slice(i,i+W).map(r=>[
        +r[3],+r[4],+r[5],+r[6],+(r[7]||0),+(r[8]||0)
      ]));
      Y.push([
        +data[i+W][3],+data[i+W][4],+data[i+W][5],
        +data[i+W][6],+(data[i+W][7]||0),+(data[i+W][8]||0)
      ]);
    }
    return { xs:tf.tensor3d(X), ys:tf.tensor2d(Y) };
  }

  function buildLSTM(){
    lstm = tf.sequential();
    lstm.add(tf.layers.lstm({units:32,inputShape:[W,F]}));
    lstm.add(tf.layers.dense({units:F}));
    lstm.compile({optimizer:'adam',loss:'mse'});
  }

  async function runLSTM(data){
    if(data.length< W+1) return;
    buildLSTM();
    const {xs,ys} = prepare(data);
    await lstm.fit(xs,ys,{epochs:50,batchSize:8,verbose:0});
    const window= data.slice(-W).map(r=>[
      +r[3],+r[4],+r[5],+r[6],+(r[7]||0),+(r[8]||0)
    ]);
    const pred = lstm.predict(tf.tensor3d([window])).dataSync();
    const out = Array.from(pred).map(v=>v.toFixed(2));
    document.getElementById('predictionResult').innerHTML = out.map((v,i)=>{
      const label = ['Temp','Hum','CO','PM2.5','PM10','CO‚ÇÇ'][i];
      return `<div class="prediction-box">${label}: ${v}</div>`;
    }).join('');
  }

  // 4) DRIVE FILES
  async function fetchFiles(){
    const url=`https://www.googleapis.com/drive/v3/files?q='${folderId}'+in+parents&fields=files(id,name,webViewLink)&key=${apiKey}`;
    const resp= await fetch(url);
    const js= await resp.json();
    driveFiles = js.files||[];
    displayFiles(driveFiles);
  }
  function displayFiles(arr){
    const c=document.getElementById('filesList');
    if(!arr.length) return c.innerText='Kh√¥ng c√≥ file';
    c.innerHTML=arr.map(f=>`<p><a href="${f.webViewLink}" target="_blank">${f.name}</a></p>`).join('');
  }
  function filterFilesByDate(){
    const s=new Date(document.getElementById('fileStart').value);
    const e=new Date(document.getElementById('fileEnd').value);
    displayFiles(driveFiles.filter(f=>{
      const m=f.name.match(/(\d{4})-(\d{2})-(\d{2})/);
      if(!m) return false;
      const d=new Date(`${m[1]}-${m[2]}-${m[3]}`);
      return d>=s && d<=e;
    }));
  }

  // 5) APPLY FILTER to table/data
  function applyFilters(){
    const s=document.getElementById('dataStart').value;
    const e=document.getElementById('dataEnd').value;
    const filt= originalData.filter(r=>{
      const d=new Date(r[1]);
      return (!s||d>=new Date(s)) && (!e||d<=new Date(e));
    });
    renderAll(filt);
  }

  // 6) EXPORT PDF & NOTIF
  document.getElementById('exportPDF').onclick = ()=>{
    html2pdf().from(document.body).save('dashboard.pdf');
  };
  function showNotif(txt){
    const d=document.createElement('div');
    d.className='update-notif';
    d.innerText=txt;
    document.body.appendChild(d);
    setTimeout(()=>d.remove(),2000);
  }

  // START
  document.addEventListener('DOMContentLoaded', async ()=>{
    await fetchData();
    setInterval(fetchData,60000);
    fetchFiles();
  });
  </script>
</body>
</html>
