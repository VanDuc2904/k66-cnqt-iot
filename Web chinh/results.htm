<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TLD-66 Data Analytics Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f7fa;
        }

        .container {
            margin-top: 30px;
            max-width: 1200px;
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .logo-container img {
            max-height: 70px; 
            margin-right: 0px;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
        }

        .header .btn-export {
            margin-top: 15px;
            font-size: 14px;
        }

        .stat-card {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .stat-card h2 {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: #495057;
        }

        .chart-container {
            margin-top: 30px;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .table-wrapper {
            margin-top: 20px;
            overflow-x: auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .table thead {
            background-color: #343a40;
            color: #fff;
        }

        .table tbody tr:hover {
            background-color: #e9ecef;
        }

        .footer {
            margin-top: 30px;
            text-align: center;
            font-size: 0.85rem;
            color: #888;
        }

        .filter-section {
            margin-bottom: 20px;
            background-color: #e9ecef;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .filter-section .form-control {
            border-radius: 4px;
        }

        .filter-btn {
            background-color: #28a745;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
            font-size: 14px;
            cursor: pointer;
        }

        .filter-btn:hover {
            background-color: #218838;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <div class="logo-container">
                <a href="index.html">
                    <img src="img/Logo1.png" alt="Logo">
                </a>
            </div>
            <h1>TLD66 Data Analytics Dashboard</h1>
            <button id="exportPDF" class="btn btn-primary btn-export">Export as PDF</button>
        </div>

        <!-- Filter Section -->
        <div class="filter-section">
            <h5>Filter Data</h5>
            <form id="filterForm" class="row g-3">
                <div class="col-md-4">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate">
                </div>
                <div class="col-md-4">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="button" class="filter-btn" onclick="applyFilters()">Apply Filters</button>
                </div>
            </form>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="stat-card">
                    <h2>Temperature (°C)</h2>
                    <p>Average: <span id="tempAvg">0</span> °C</p>
                    <p>Max: <span id="tempMax">0</span> °C</p>
                    <p>Min: <span id="tempMin">0</span> °C</p>
                    <p>Standard Deviation: <span id="tempStdDev">0</span> °C</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="stat-card">
                    <h2>Humidity (%)</h2>
                    <p>Average: <span id="humidityAvg">0</span> %</p>
                    <p>Max: <span id="humidityMax">0</span> %</p>
                    <p>Min: <span id="humidityMin">0</span> %</p>
                    <p>Standard Deviation: <span id="humidityStdDev">0</span> %</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="stat-card">
                    <h2>CO Levels (ppm)</h2>
                    <p>Average: <span id="coAvg">0</span> ppm</p>
                    <p>Max: <span id="coMax">0</span> ppm</p>
                    <p>Min: <span id="coMin">0</span> ppm</p>
                    <p>Standard Deviation: <span id="coStdDev">0</span> ppm</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="stat-card">
                    <h2>PM2.5 Levels (µg/m³)</h2>
                    <p>Average: <span id="pm25Avg">0</span> µg/m³</p>
                    <p>Max: <span id="pm25Max">0</span> µg/m³</p>
                    <p>Min: <span id="pm25Min">0</span> µg/m³</p>
                    <p>Standard Deviation: <span id="pm25StdDev">0</span> µg/m³</p>
                </div>
            </div>
        </div>

        <!-- Data Table -->
        <div class="table-wrapper">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Temperature (°C)</th>
                        <th>Humidity (%)</th>
                        <th>CO (ppm)</th>
                        <th>PM2.5 (µg/m³)</th>
                    </tr>
                </thead>
                <tbody id="data-table">
                    <!-- Data rows will be inserted here -->
                </tbody>
            </table>
            <div id="error-message" class="text-center text-danger"></div>
        </div>

        <!-- Charts Section -->
        <div class="chart-container">
            <h2>Data Visualization</h2>
            <div class="row">
                <div class="col-md-6">
                    <canvas id="temperatureChart"></canvas>
                </div>
                <div class="col-md-6">
                    <canvas id="humidityChart"></canvas>
                </div>
                <div class="col-md-6">
                    <canvas id="coChart"></canvas>
                </div>
                <div class="col-md-6">
                    <canvas id="pm25Chart"></canvas>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="footer">
            © TLD66 Data Analytics Dashboard 2024.
        </div>
    </div>

    <script>
        const sheetId = '1oOeN-HUb_xZfcIiY0d06MXUGL0-vsJW5r-zNa_NIKe4'; 
        const apiKey = 'AIzaSyAFLByP7yNm_HMSO8sTyWjAXxwVrcXNoXw'; 
        let originalData = []; 
    
        async function fetchData() {
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/sheet_id?key=${apiKey}`;
            try {
                const response = await fetch(url);
                const data = await response.json();
                if (data && data.values) {
                    const rows = data.values.slice(1); 
                    originalData = rows;
                    const last12Rows = rows.slice(-12);
                    displayData(last12Rows);
                    displayStatistics(last12Rows);
                    renderCharts(last12Rows);
                    showUpdateNotification(); 
                } else {
                    throw new Error('Không có dữ liệu');
                }
            } catch (error) {
                console.error('Lỗi khi lấy dữ liệu:', error);
                document.getElementById('error-message').textContent = 'Không thể tải dữ liệu.';
            }
        }
    
        // Hiển thị dữ liệu trong bảng
        function displayData(data) {
            const tableBody = document.getElementById('data-table');
            tableBody.innerHTML = '';
            data.forEach((row, index) => {
                const date = row[0]; // Lấy ngày từ cột A
                const time = row[1]; // Lấy giờ từ cột B
                const temperature = isNaN(row[2]) ? 'N/A' : row[2];
                const humidity = isNaN(row[3]) ? 'N/A' : row[3];
                const coLevel = isNaN(row[4]) ? 'N/A' : row[4];
                const pm25Level = isNaN(row[5]) ? 'N/A' : row[5];
                const rowHTML = `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${date}</td>
                        <td>${time}</td>
                        <td>${temperature}</td>
                        <td>${humidity}</td>
                        <td>${coLevel}</td>
                        <td>${pm25Level}</td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', rowHTML);
            });
        }
    
        // Hiển thị thống kê dữ liệu
        function displayStatistics(data) {
            const temperatures = data.map(row => parseFloat(row[2])).filter(value => !isNaN(value));
            const humidities = data.map(row => parseFloat(row[3])).filter(value => !isNaN(value));
            const coLevels = data.map(row => parseFloat(row[4])).filter(value => !isNaN(value));
            const pm25Levels = data.map(row => parseFloat(row[5])).filter(value => !isNaN(value));
    
            document.getElementById('tempAvg').textContent = calculateAverage(temperatures).toFixed(2);
            document.getElementById('tempMax').textContent = Math.max(...temperatures).toFixed(2);
            document.getElementById('tempMin').textContent = Math.min(...temperatures).toFixed(2);
            document.getElementById('tempStdDev').textContent = calculateStandardDeviation(temperatures).toFixed(2);
    
            document.getElementById('humidityAvg').textContent = calculateAverage(humidities).toFixed(2);
            document.getElementById('humidityMax').textContent = Math.max(...humidities).toFixed(2);
            document.getElementById('humidityMin').textContent = Math.min(...humidities).toFixed(2);
            document.getElementById('humidityStdDev').textContent = calculateStandardDeviation(humidities).toFixed(2);
    
            document.getElementById('coAvg').textContent = calculateAverage(coLevels).toFixed(2);
            document.getElementById('coMax').textContent = Math.max(...coLevels).toFixed(2);
            document.getElementById('coMin').textContent = Math.min(...coLevels).toFixed(2);
            document.getElementById('coStdDev').textContent = calculateStandardDeviation(coLevels).toFixed(2);
    
            document.getElementById('pm25Avg').textContent = calculateAverage(pm25Levels).toFixed(2);
            document.getElementById('pm25Max').textContent = Math.max(...pm25Levels).toFixed(2);
            document.getElementById('pm25Min').textContent = Math.min(...pm25Levels).toFixed(2);
            document.getElementById('pm25StdDev').textContent = calculateStandardDeviation(pm25Levels).toFixed(2);
        }
    
        // Tính trung bình
        function calculateAverage(array) {
            if (array.length === 0) return 0;
            const total = array.reduce((sum, value) => sum + value, 0);
            return total / array.length;
        }
    
        // Tính độ lệch chuẩn
        function calculateStandardDeviation(array) {
            if (array.length === 0) return 0;
            const mean = calculateAverage(array);
            const squareDiffs = array.map(value => Math.pow(value - mean, 2));
            const avgSquareDiff = calculateAverage(squareDiffs);
            return Math.sqrt(avgSquareDiff);
        }
    
        // Vẽ biểu đồ bằng Chart.js
        function renderCharts(data) {
            const labels = data.map(row => `${row[0]} ${row[1]}`); // Kết hợp ngày và giờ cho nhãn
            const temperatures = data.map(row => parseFloat(row[2])).filter(value => !isNaN(value));
            const humidities = data.map(row => parseFloat(row[3])).filter(value => !isNaN(value));
            const coLevels = data.map(row => parseFloat(row[4])).filter(value => !isNaN(value));
            const pm25Levels = data.map(row => parseFloat(row[5])).filter(value => !isNaN(value));
    
            new Chart(document.getElementById('temperatureChart'), {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: temperatures,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: { title: { display: true, text: 'Date and Time' } },
                        y: { beginAtZero: true, title: { display: true, text: 'Temperature (°C)' } }
                    }
                }
            });
    
            new Chart(document.getElementById('humidityChart'), {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Humidity (%)',
                        data: humidities,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: { title: { display: true, text: 'Date and Time' } },
                        y: { beginAtZero: true, title: { display: true, text: 'Humidity (%)' } }
                    }
                }
            });
    
            new Chart(document.getElementById('coChart'), {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'CO Levels (ppm)',
                        data: coLevels,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: { title: { display: true, text: 'Date and Time' } },
                        y: { beginAtZero: true, title: { display: true, text: 'CO Levels (ppm)' } }
                    }
                }
            });
    
            new Chart(document.getElementById('pm25Chart'), {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'PM2.5 Levels (µg/m³)',
                        data: pm25Levels,
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: { title: { display: true, text: 'Date and Time' } },
                        y: { beginAtZero: true, title: { display: true, text: 'PM2.5 Levels (µg/m³)' } }
                    }
                }
            });
        }
    
        function applyFilters() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const filteredData = originalData.filter(row => {
                const date = new Date(row[0]);
                return (!startDate || date >= new Date(startDate)) && (!endDate || date <= new Date(endDate));
            });
            displayData(filteredData);
            displayStatistics(filteredData);
            renderCharts(filteredData);
        }
    
        function showUpdateNotification() {
            const notification = document.createElement('div');
            notification.className = 'update-notification';
            notification.innerText = 'Dữ liệu đã được cập nhật!';
            notification.style.position = 'fixed';
            notification.style.bottom = '20px';
            notification.style.right = '20px';
            notification.style.backgroundColor = '#28a745';
            notification.style.color = '#fff';
            notification.style.padding = '10px';
            notification.style.borderRadius = '5px';
            document.body.appendChild(notification);
    
            setTimeout(() => {
                notification.remove();
            }, 3000); 
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchData();
            setInterval(fetchData, 60000); 
        });
    
        document.getElementById('exportPDF').addEventListener('click', () => {
            const element = document.querySelector('.container');
            html2pdf().from(element).toPdf().get('pdf').then(pdf => {
                pdf.save('data_analytics.pdf');
            });
        });
    </script>
</body>

</html>
