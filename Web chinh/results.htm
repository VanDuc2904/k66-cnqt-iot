<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TLD-66 Data Analytics Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body { font-family: 'Roboto', sans-serif; background: #f4f7fa; }
        .container { max-width:1200px; margin:30px auto; }
        .header h1 { font-size:2.5rem; font-weight:bold; }
        .stat-card { background:#fff; padding:20px; border-radius:12px; box-shadow:0 4px 15px rgba(0,0,0,0.1); margin-bottom:20px; }
        .chart-container { background:#fff; padding:20px; border-radius:12px; box-shadow:0 4px 15px rgba(0,0,0,0.1); margin-top:30px; }
        .table-wrapper { background:#fff; border-radius:12px; box-shadow:0 4px 15px rgba(0,0,0,0.1); margin-top:20px; overflow-x:auto; }
        .update-notification {
            position:fixed; bottom:20px; right:20px;
            background:#28a745; color:#fff; padding:10px 15px; border-radius:5px;
            animation:slideIn .5s forwards;
        }
        @keyframes slideIn { from {opacity:0;transform:translateX(100%);} to {opacity:1;transform:translateX(0);} }
    </style>
</head>
<body>
  <div class="container">
    <div class="header text-center mb-4">
      <img src="img/Logo1.png" alt="Logo" style="max-height:70px">
      <h1>TLD66 Data Analytics Dashboard</h1>
      <p>Dữ liệu được cập nhật theo thời gian thực, tự động refresh mỗi 60s.</p>
      <button id="exportPDF" class="btn btn-success">Export as PDF</button>
    </div>

    <!-- Thống kê nhanh -->
    <div class="row">
      <div class="col-md-4">
        <div class="stat-card">
          <h2>Temperature (°C)</h2>
          <p>Avg: <span id="tempAvg">0</span></p>
          <p>Max: <span id="tempMax">0</span></p>
          <p>Min: <span id="tempMin">0</span></p>
          <p>StdDev: <span id="tempStdDev">0</span></p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h2>Humidity (%)</h2>
          <p>Avg: <span id="humAvg">0</span></p>
          <p>Max: <span id="humMax">0</span></p>
          <p>Min: <span id="humMin">0</span></p>
          <p>StdDev: <span id="humStdDev">0</span></p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h2>CO (ppm)</h2>
          <p>Avg: <span id="coAvg">0</span></p>
          <p>Max: <span id="coMax">0</span></p>
          <p>Min: <span id="coMin">0</span></p>
          <p>StdDev: <span id="coStdDev">0</span></p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h2>PM2.5 (µg/m³)</h2>
          <p>Avg: <span id="pm25Avg">0</span></p>
          <p>Max: <span id="pm25Max">0</span></p>
          <p>Min: <span id="pm25Min">0</span></p>
          <p>StdDev: <span id="pm25StdDev">0</span></p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h2>PM10 (µg/m³)</h2>
          <p>Avg: <span id="pm10Avg">0</span></p>
          <p>Max: <span id="pm10Max">0</span></p>
          <p>Min: <span id="pm10Min">0</span></p>
          <p>StdDev: <span id="pm10StdDev">0</span></p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-card">
          <h2>CO₂ (ppm)</h2>
          <p>Avg: <span id="co2Avg">0</span></p>
          <p>Max: <span id="co2Max">0</span></p>
          <p>Min: <span id="co2Min">0</span></p>
          <p>StdDev: <span id="co2StdDev">0</span></p>
        </div>
      </div>
    </div>

    <!-- Bảng dữ liệu -->
    <div class="table-wrapper">
      <table class="table table-striped mb-0">
        <thead class="table-dark">
          <tr>
            <th>No</th><th>Ngày</th><th>Giờ</th>
            <th>Temp (°C)</th><th>Hum (%)</th><th>CO</th>
            <th>PM2.5</th><th>PM10</th><th>CO₂</th>
          </tr>
        </thead>
        <tbody id="data-table"></tbody>
      </table>
      <p id="error-message" class="text-center text-danger mt-2"></p>
    </div>

    <!-- Biểu đồ -->
    <div class="chart-container">
      <h2 class="mb-4">Visualization (Last 12 records)</h2>
      <div class="row">
        <div class="col-md-6"><canvas id="chart-temp"></canvas></div>
        <div class="col-md-6"><canvas id="chart-hum"></canvas></div>
        <div class="col-md-6"><canvas id="chart-co"></canvas></div>
        <div class="col-md-6"><canvas id="chart-pm25"></canvas></div>
        <div class="col-md-6"><canvas id="chart-pm10"></canvas></div>
        <div class="col-md-6"><canvas id="chart-co2"></canvas></div>
      </div>
    </div>
  </div>

  <script>
    const sheetId = '1oOeN-HUb_xZfcIiY0d06MXUGL0-vsJW5r-zNa_NIKe4';
    const apiKey  = 'AIzaSyAFLByP7yNm_HMSO8sTyWjAXxwVrcXNoXw';
    let originalData = [];

    async function fetchData() {
      const range = 'Sheet1!A:I';
      const url   = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${encodeURIComponent(range)}?key=${apiKey}`;
      try {
        const res  = await fetch(url);
        const json = await res.json();
        if (!json.values) throw new Error('Không có dữ liệu');
        const rows = json.values.slice(1);    // bỏ header
        originalData = rows;
        const last12 = rows.slice(-12);
        displayData(last12);
        displayStatistics(last12);
        renderCharts(last12);
        showUpdateNotification();
      } catch (err) {
        console.error(err);
        document.getElementById('error-message').textContent = 'Không thể tải dữ liệu.';
      }
    }

    function displayData(data) {
      const tbody = document.getElementById('data-table');
      tbody.innerHTML = '';
      data.forEach((r,i) => {
        const [ts, date, time, t, h, co, pm25, pm10, co2] = r;
        tbody.insertAdjacentHTML('beforeend', `
          <tr>
            <td>${i+1}</td>
            <td>${date}</td>
            <td>${time}</td>
            <td>${t || 'N/A'}</td>
            <td>${h || 'N/A'}</td>
            <td>${co||'N/A'}</td>
            <td>${pm25||'N/A'}</td>
            <td>${pm10||'N/A'}</td>
            <td>${co2||'N/A'}</td>
          </tr>
        `);
      });
    }

    function displayStatistics(data) {
      const toNum = (idx) => data.map(r=>parseFloat(r[idx])).filter(v=>!isNaN(v));
      const stats = (arr, idAvg,idMax,idMin,idStd) => {
        document.getElementById(idAvg).textContent = avg(arr).toFixed(2);
        document.getElementById(idMax).textContent = Math.max(...arr).toFixed(2);
        document.getElementById(idMin).textContent = Math.min(...arr).toFixed(2);
        document.getElementById(idStd).textContent = std(arr).toFixed(2);
      };
      stats(toNum(3),'tempAvg','tempMax','tempMin','tempStdDev');
      stats(toNum(4),'humAvg','humMax','humMin','humStdDev');
      stats(toNum(5),'coAvg','coMax','coMin','coStdDev');
      stats(toNum(6),'pm25Avg','pm25Max','pm25Min','pm25StdDev');
      stats(toNum(7),'pm10Avg','pm10Max','pm10Min','pm10StdDev');
      stats(toNum(8),'co2Avg','co2Max','co2Min','co2StdDev');
    }

    function avg(a){return a.reduce((s,v)=>s+v,0)/ (a.length||1);}
    function std(a){
      const m = avg(a);
      return Math.sqrt( avg(a.map(v=>Math.pow(v-m,2))) );
    }

    let charts = {};
    function renderCharts(data) {
      const labels = data.map(r=>`${r[1]} ${r[2]}`);
      const ds = (idx) => data.map(r=>parseFloat(r[idx])).filter(v=>!isNaN(v));
      const configs = [
        { id:'chart-temp', label:'Temp (°C)', data:ds(3) },
        { id:'chart-hum',  label:'Hum (%)',    data:ds(4) },
        { id:'chart-co',   label:'CO (ppm)',    data:ds(5) },
        { id:'chart-pm25', label:'PM2.5',       data:ds(6) },
        { id:'chart-pm10', label:'PM10',        data:ds(7) },
        { id:'chart-co2',  label:'CO₂ (ppm)',   data:ds(8) },
      ];
      configs.forEach(c => {
        if (charts[c.id]) charts[c.id].destroy();
        charts[c.id] = new Chart(
          document.getElementById(c.id), {
            type:'line',
            data:{ labels, datasets:[{
              label:c.label,
              data:c.data,
              fill:false,
              tension:0.3
            }]},
            options:{ responsive:true, scales:{ x:{display:true}, y:{beginAtZero:false}}}
          }
        );
      });
    }

    function showUpdateNotification(){
      const n = document.createElement('div');
      n.className='update-notification';
      n.textContent='Dữ liệu đã được cập nhật!';
      document.body.appendChild(n);
      setTimeout(()=>n.remove(),3000);
    }

    document.addEventListener('DOMContentLoaded',()=>{
      fetchData();
      setInterval(fetchData,60000);
      document.getElementById('exportPDF').addEventListener('click',()=>{
        html2pdf().from(document.querySelector('.container')).toPdf().get('pdf').then(pdf=>pdf.save('report.pdf'));
      });
    });
  </script>
</body>
</html>
