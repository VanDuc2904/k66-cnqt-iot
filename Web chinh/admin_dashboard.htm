<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản trị web TLD-66</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script> <!-- Thư viện Excel -->
    <style>
        body { font-family: 'Roboto', sans-serif; background: #f8f9fa; margin: 0; padding: 0; }
        .sidebar {
            width: 250px;
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0;
            background: #34495e;
            padding-top: 20px;
            color: #fff;
            transition: transform 0.3s;
        }
        .sidebar a {
            color: #fff;
            text-decoration: none;
            display: block;
            padding: 10px 15px;
        }
        .sidebar a:hover { background: #2c3e50; }
        .content { margin-left: 260px; padding: 20px; transition: margin-left 0.3s; }
        .card { margin-bottom: 20px; }
        .history-table, .device-table, .user-table { max-height: 300px; overflow-y: auto; }
        .btn-custom { background: #2c3e50; color: #fff; border: none; transition: background 0.3s; }
        .btn-custom:hover { background: #1a252f; }
        .maintenance-card { background: #fff3cd; }
        .disabled-section { opacity: 0.6; pointer-events: none; }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
                transform: translateX(-100%);
            }
            .sidebar.active {
                transform: translateX(0);
            }
            .content {
                margin-left: 0;
                padding: 10px;
            }
            .card {
                margin-bottom: 10px;
            }
            .card-body {
                padding: 10px;
            }
            .form-control {
                font-size: 14px;
                padding: 6px;
            }
            .btn-custom {
                font-size: 14px;
                padding: 6px 10px;
            }
            .table {
                font-size: 12px;
            }
            .sidebar-toggle {
                display: block;
                position: fixed;
                top: 10px;
                left: 10px;
                z-index: 1000;
                background: #2c3e50;
                border: none;
                color: #fff;
                padding: 10px;
                border-radius: 5px;
            }
            .sidebar-toggle:hover {
                background: #1a252f;
            }
        }

        /* Ẩn nút toggle trên desktop */
        @media (min-width: 769px) {
            .sidebar-toggle {
                display: none;
            }
        }
    </style>
</head>
<body>
    <button class="sidebar-toggle" onclick="toggleSidebar()">☰</button>
    <div class="sidebar" id="sidebar">
        <h4 class="text-center">Menu</h4>
        <a href="#notification">Quản lý thông báo</a>
        <a href="#mapSettings">Cài đặt bản đồ</a>
        <a href="#commandControl">Kiểm soát chức năng</a>
        <a href="#dataAccess">Truy cập dữ liệu</a>
        <a href="#deviceManagement">Quản lý thiết bị</a>
        <a href="#maintenance">Bảo trì hệ thống</a>
        <a href="#userManagement">Phân quyền người dùng</a>
        <a href="#userList">Danh sách người dùng</a>
        <a href="#activityLog">Lịch sử hoạt động</a>
        <a href="#" onclick="logout()">Đăng xuất</a>
    </div>

    <div class="content">
        <div class="container mt-4">
            <h1>Quản trị web TLD-66</h1>
            <p>Chào mừng bạn đến với trang quản trị. Thời gian hiện tại: 04:19 AM, 23/06/2025</p>

            <!-- Quản lý thông báo -->
            <div class="card" id="notification">
                <div class="card-body">
                    <h5 class="card-title">Quản lý thông báo</h5>
                    <div class="mb-3">
                        <label for="newNotification" class="form-label">Cập nhật thông báo mới:</label>
                        <input type="text" class="form-control" id="newNotification" placeholder="Nhập thông báo mới">
                        <button class="btn btn-custom mt-2" id="updateNotificationBtn" onclick="updateNotification()">Cập nhật</button>
                    </div>
                </div>
            </div>

            <!-- Cài đặt bản đồ -->
            <div class="card" id="mapSettings">
                <div class="card-body">
                    <h5 class="card-title">Cài đặt bản đồ</h5>
                    <div class="mb-3">
                        <label for="latitude" class="form-label">Latitude:</label>
                        <input type="number" step="0.00001" class="form-control" id="latitude" placeholder="Nhập latitude">
                    </div>
                    <div class="mb-3">
                        <label for="longitude" class="form-label">Longitude:</label>
                        <input type="number" step="0.00001" class="form-control" id="longitude" placeholder="Nhập longitude">
                    </div>
                    <div class="mb-3">
                        <label for="markerTitle" class="form-label">Tiêu đề:</label>
                        <input type="text" class="form-control" id="markerTitle" placeholder="Nhập tiêu đề cho marker">
                    </div>
                    <button class="btn btn-custom mt-2" id="updateMapSettingsBtn" onclick="updateMapSettings()">Cập nhật bản đồ</button>
                </div>
            </div>

            <!-- Kiểm soát chức năng -->
            <div class="card" id="commandControl">
                <div class="card-body">
                    <h5 class="card-title">Kiểm soát chức năng</h5>
                    <div class="mb-3">
                        <label class="form-label">Thông số thời gian thực</label>
                        <button class="btn btn-success me-2" id="unlockCommandBtn" onclick="unlockCommand()">Mở khóa</button>
                        <button class="btn btn-danger" id="lockCommandBtn" onclick="lockCommand()">Đóng khóa</button>
                    </div>
                </div>
            </div>

            <!-- Truy cập dữ liệu -->
            <div class="card" id="dataAccess">
                <div class="card-body">
                    <h5 class="card-title">Truy cập dữ liệu</h5>
                    <div class="mb-3">
                        <label class="form-label">Dữ liệu & thống kê</label>
                        <button class="btn btn-success me-2" id="unlockDataBtn" onclick="unlockDataStatistics()">Mở khóa</button>
                        <button class="btn btn-danger" id="lockDataBtn" onclick="lockDataStatistics()">Đóng khóa</button>
                    </div>
                    <button class="btn btn-custom mt-2" id="exportExcelBtn" onclick="exportExcel()">Xuất báo cáo Excel</button>
                </div>
            </div>

            <!-- Quản lý thiết bị -->
            <div class="card" id="deviceManagement">
                <div class="card-body">
                    <h5 class="card-title">Quản lý thiết bị</h5>
                    <div class="mb-3">
                        <label for="deviceId" class="form-label">ID thiết bị:</label>
                        <input type="text" class="form-control" id="deviceId" placeholder="Nhập ID thiết bị">
                    </div>
                    <div class="mb-3">
                        <label for="deviceStatus" class="form-label">Trạng thái:</label>
                        <select class="form-control" id="deviceStatus">
                            <option value="active">Hoạt động</option>
                            <option value="inactive">Ngưng hoạt động</option>
                        </select>
                    </div>
                    <button class="btn btn-custom mt-2" id="updateDeviceBtn" onclick="updateDevice()">Cập nhật thiết bị</button>
                    <div class="device-table mt-3">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody id="deviceTable"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Bảo trì hệ thống -->
            <div class="card maintenance-card" id="maintenance">
                <div class="card-body">
                    <h5 class="card-title">Bảo trì hệ thống</h5>
                    <div class="mb-3">
                        <label for="maintenanceDate" class="form-label">Ngày bảo trì:</label>
                        <input type="date" class="form-control" id="maintenanceDate">
                    </div>
                    <button class="btn btn-custom mt-2" id="scheduleMaintenanceBtn" onclick="scheduleMaintenance()">Lên lịch bảo trì</button>
                    <p id="maintenanceStatus" class="mt-2">Trạng thái: Chưa kiểm tra</p>
                </div>
            </div>

            <!-- Phân quyền người dùng -->
            <div class="card" id="userManagement">
                <div class="card-body">
                    <h5 class="card-title">Phân quyền người dùng</h5>
                    <div class="mb-3">
                        <label for="userEmail" class="form-label">Email người dùng:</label>
                        <input type="email" class="form-control" id="userEmail" placeholder="Nhập email">
                    </div>
                    <div class="mb-3">
                        <label for="userRole" class="form-label">Quyền:</label>
                        <select class="form-control" id="userRole">
                            <option value="admin">Admin</option>
                            <option value="editor">Editor</option>
                            <option value="viewer">Viewer</option>
                        </select>
                    </div>
                    <button class="btn btn-custom mt-2" id="updateUserRoleBtn" onclick="updateUserRole()">Cập nhật quyền</button>
                    <div class="mt-3">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Email</th>
                                    <th>Quyền</th>
                                </tr>
                            </thead>
                            <tbody id="userTable"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Danh sách người dùng -->
            <div class="card" id="userList">
                <div class="card-body">
                    <h5 class="card-title">Danh sách người dùng</h5>
                    <div class="user-table mt-3">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Email</th>
                                    <th>Quyền</th>
                                    <th>Thời gian đăng ký</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody id="userListTable"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Lịch sử hoạt động -->
            <div class="card" id="activityLog">
                <div class="card-body">
                    <h5 class="card-title">Lịch sử hoạt động</h5>
                    <div class="history-table">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Thời gian</th>
                                    <th>Hành động</th>
                                    <th>Chi tiết</th>
                                </tr>
                            </thead>
                            <tbody id="activityLogTable"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Thêm Firebase SDK từ CDN (Firebase v8) -->
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>

    <script>
        // Cấu hình Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyC3EhCzgXR02e_gjvJqEb32htKMqo3mXug",
            authDomain: "tld66-3d929.firebaseapp.com",
            databaseURL: "https://tld66-3d929-default-rtdb.firebaseio.com/",
            projectId: "tld66-3d929",
            storageBucket: "tld66-3d929.appspot.com",
            messagingSenderId: "580068871289",
            appId: "1:580068871289:web:d46a8e49eee792a6d518a8",
            measurementId: "G-3R2JXXFMD0"
        };

        // Khởi tạo Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        const auth = firebase.auth();
        const activityLogRef = firebase.database().ref('activityLog');
        const usersRef = firebase.database().ref('users');
        const devicesRef = firebase.database().ref('devices');
        const maintenanceRef = firebase.database().ref('maintenance');

        // Lấy vai trò người dùng hiện tại
        let currentUserRole = 'admin'; // Mặc định là admin, cần kiểm tra thực tế
        auth.onAuthStateChanged((user) => {
            if (user) {
                usersRef.child(user.email).once('value').then((snapshot) => {
                    const userData = snapshot.val();
                    currentUserRole = userData ? userData.role : 'admin'; // Lấy role từ Firebase
                    updatePermissions();
                }).catch((error) => {
                    console.error('Lỗi lấy vai trò người dùng:', error);
                });
            }
        });

        // Cập nhật quyền truy cập
        function updatePermissions() {
            const isAdmin = currentUserRole === 'admin';
            const isEditor = currentUserRole === 'editor' || isAdmin;

            document.getElementById('updateNotificationBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('updateMapSettingsBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('unlockCommandBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('lockCommandBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('unlockDataBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('lockDataBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('exportExcelBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('updateDeviceBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('scheduleMaintenanceBtn').classList.toggle('disabled-section', !isEditor);
            document.getElementById('updateUserRoleBtn').classList.toggle('disabled-section', !isAdmin);
        }

        // Tải dữ liệu khi trang quản trị được tải
        document.addEventListener('DOMContentLoaded', () => {
            loadMapSettings();
            loadActivityLog();
            loadDevices();
            loadUserRoles();
            loadUserList();
            checkMaintenanceStatus();
            toggleSidebar(); // Mở sidebar mặc định trên mobile
        });

        // Toggle sidebar cho mobile
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('active');
        }

        function loadMapSettings() {
            firebase.database().ref('mapSettings').once('value')
                .then(snapshot => {
                    const mapSettings = snapshot.val();
                    if (mapSettings) {
                        document.getElementById('latitude').value = mapSettings.lat;
                        document.getElementById('longitude').value = mapSettings.lng;
                        document.getElementById('markerTitle').value = mapSettings.title;
                    }
                })
                .catch(error => {
                    console.error('Lỗi tải dữ liệu bản đồ:', error);
                    alert('Có lỗi xảy ra khi tải dữ liệu bản đồ.');
                });
        }

        function loadActivityLog() {
            activityLogRef.on('value', snapshot => {
                const logs = snapshot.val() || {};
                const tbody = document.getElementById('activityLogTable');
                tbody.innerHTML = '';
                Object.entries(logs).forEach(([key, log]) => {
                    tbody.insertAdjacentHTML('beforeend', `
                        <tr>
                            <td>${new Date(log.timestamp).toLocaleString('vi-VN')}</td>
                            <td>${log.action}</td>
                            <td>${log.details}</td>
                        </tr>
                    `);
                });
            });
        }

        function loadDevices() {
            devicesRef.on('value', snapshot => {
                const devices = snapshot.val() || {};
                const tbody = document.getElementById('deviceTable');
                tbody.innerHTML = '';
                Object.entries(devices).forEach(([id, status]) => {
                    tbody.insertAdjacentHTML('beforeend', `
                        <tr>
                            <td>${id}</td>
                            <td>${status}</td>
                        </tr>
                    `);
                });
            });
        }

        function loadUserRoles() {
            usersRef.on('value', snapshot => {
                const users = snapshot.val() || {};
                const tbody = document.getElementById('userTable');
                tbody.innerHTML = '';
                Object.entries(users).forEach(([email, role]) => {
                    tbody.insertAdjacentHTML('beforeend', `
                        <tr>
                            <td>${email}</td>
                            <td>${role}</td>
                        </tr>
                    `);
                });
            });
        }

        function loadUserList() {
            usersRef.on('value', snapshot => {
                const users = snapshot.val() || {};
                const tbody = document.getElementById('userListTable');
                tbody.innerHTML = '';
                Object.entries(users).forEach(([email, data]) => {
                    tbody.insertAdjacentHTML('beforeend', `
                        <tr>
                            <td>${email}</td>
                            <td>${data.role || 'Chưa phân quyền'}</td>
                            <td>${new Date(data.timestamp || Date.now()).toLocaleString('vi-VN')}</td>
                            <td>
                                <button class="btn btn-warning btn-sm" onclick="editUser('${email}')" ${currentUserRole !== 'admin' ? 'disabled' : ''}>Sửa</button>
                                <button class="btn btn-danger btn-sm" onclick="deleteUser('${email}')" ${currentUserRole !== 'admin' ? 'disabled' : ''}>Xóa</button>
                            </td>
                        </tr>
                    `);
                });
            });
        }

        function checkMaintenanceStatus() {
            maintenanceRef.once('value').then(snapshot => {
                const maintenance = snapshot.val();
                if (maintenance && maintenance.date) {
                    const maintDate = new Date(maintenance.date);
                    const today = new Date();
                    document.getElementById('maintenanceStatus').textContent = maintDate > today ? `Trạng thái: Đã lên lịch (${maintDate.toLocaleDateString('vi-VN')})` : 'Trạng thái: Đã kiểm tra';
                }
            });
        }

        // Cập nhật thông báo
        function updateNotification() {
            if (confirm('Bạn có chắc muốn cập nhật thông báo?')) {
                const newNotification = document.getElementById('newNotification').value.trim();
                if (newNotification) {
                    firebase.database().ref('notification/content').set(newNotification)
                        .then(() => {
                            activityLogRef.push({
                                timestamp: Date.now(),
                                action: 'Cập nhật thông báo',
                                details: `Nội dung: ${newNotification}`
                            });
                            alert('Thông báo đã được cập nhật.');
                            document.getElementById('newNotification').value = '';
                        })
                        .catch(error => {
                            console.error('Lỗi cập nhật thông báo:', error);
                            alert('Có lỗi xảy ra khi cập nhật thông báo.');
                        });
                } else {
                    alert('Vui lòng nhập thông báo.');
                }
            }
        }

        // Cập nhật cài đặt bản đồ
        function updateMapSettings() {
            if (confirm('Bạn có chắc muốn cập nhật cài đặt bản đồ?')) {
                const latitude = document.getElementById('latitude').value.trim();
                const longitude = document.getElementById('longitude').value.trim();
                const markerTitle = document.getElementById('markerTitle').value.trim();

                if (latitude && longitude && markerTitle) {
                    const lat = parseFloat(latitude);
                    const lng = parseFloat(longitude);

                    firebase.database().ref('mapSettings').set({
                        lat: lat,
                        lng: lng,
                        title: markerTitle
                    })
                    .then(() => {
                        activityLogRef.push({
                            timestamp: Date.now(),
                            action: 'Cập nhật bản đồ',
                            details: `Lat: ${lat}, Lng: ${lng}, Title: ${markerTitle}`
                        });
                        localStorage.setItem('mapLat', lat);
                        localStorage.setItem('mapLng', lng);
                        localStorage.setItem('mapTitle', markerTitle);

                        if (window.opener && !window.opener.closed && typeof window.opener.updateMarkerPosition === 'function') {
                            window.opener.updateMarkerPosition(lat, lng, markerTitle);
                        }

                        alert('Cài đặt bản đồ đã được cập nhật.');
                    })
                    .catch(error => {
                        console.error('Lỗi cập nhật bản đồ:', error);
                        alert('Có lỗi xảy ra khi cập nhật bản đồ.');
                    });
                } else {
                    alert('Vui lòng nhập đầy đủ thông tin vị trí.');
                }
            }
        }

        // Hàm đăng xuất
        function logout() {
            if (confirm('Bạn có chắc muốn đăng xuất?')) {
                auth.signOut().then(() => {
                    window.location.href = "index.html";
                }).catch((error) => {
                    console.error('Lỗi đăng xuất:', error);
                    alert('Có lỗi xảy ra khi đăng xuất.');
                });
            }
        }

        function unlockCommand() {
            if (confirm('Bạn có chắc muốn mở khóa chức năng?')) {
                firebase.database().ref('commandSettings').set({
                    isUnlocked: true
                })
                .then(() => {
                    activityLogRef.push({
                        timestamp: Date.now(),
                        action: 'Mở khóa chức năng',
                        details: 'Thông số thời gian thực'
                    });
                    alert('Chức năng đã được mở khóa.');
                    if (window.opener && !window.opener.closed && typeof window.opener.updateCommandStatus === 'function') {
                        window.opener.updateCommandStatus(true);
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi mở khóa:', error);
                    alert('Có lỗi xảy ra khi mở khóa.');
                });
            }
        }

        function lockCommand() {
            if (confirm('Bạn có chắc muốn đóng khóa chức năng?')) {
                firebase.database().ref('commandSettings').set({
                    isUnlocked: false
                })
                .then(() => {
                    activityLogRef.push({
                        timestamp: Date.now(),
                        action: 'Đóng khóa chức năng',
                        details: 'Thông số thời gian thực'
                    });
                    alert('Chức năng đã bị đóng.');
                    if (window.opener && !window.opener.closed && typeof window.opener.updateCommandStatus === 'function') {
                        window.opener.updateCommandStatus(false);
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi đóng chức năng:', error);
                    alert('Có lỗi xảy ra khi đóng chức năng.');
                });
            }
        }

        function unlockDataStatistics() {
            if (confirm('Bạn có chắc muốn mở khóa truy cập?')) {
                firebase.database().ref('accessControl/dataStatistics').set({
                    isUnlocked: true
                })
                .then(() => {
                    activityLogRef.push({
                        timestamp: Date.now(),
                        action: 'Mở khóa truy cập',
                        details: 'Dữ liệu & thống kê'
                    });
                    alert('Đã mở khóa truy cập vào Dữ liệu & Thống kê.');
                })
                .catch(error => {
                    console.error('Lỗi khi mở khóa truy cập:', error);
                    alert('Có lỗi xảy ra khi mở khóa truy cập.');
                });
            }
        }

        function lockDataStatistics() {
            if (confirm('Bạn có chắc muốn đóng khóa truy cập?')) {
                firebase.database().ref('accessControl/dataStatistics').set({
                    isUnlocked: false
                })
                .then(() => {
                    activityLogRef.push({
                        timestamp: Date.now(),
                        action: 'Đóng khóa truy cập',
                        details: 'Dữ liệu & thống kê'
                    });
                    alert('Đã đóng khóa truy cập vào Dữ liệu & Thống kê.');
                })
                .catch(error => {
                    console.error('Lỗi khi đóng khóa truy cập:', error);
                    alert('Có lỗi xảy ra khi đóng khóa truy cập.');
                });
            }
        }

        function updateDevice() {
            if (confirm('Bạn có chắc muốn cập nhật trạng thái thiết bị?')) {
                const deviceId = document.getElementById('deviceId').value.trim();
                const deviceStatus = document.getElementById('deviceStatus').value;
                if (deviceId) {
                    devicesRef.child(deviceId).set(deviceStatus)
                        .then(() => {
                            activityLogRef.push({
                                timestamp: Date.now(),
                                action: 'Cập nhật thiết bị',
                                details: `ID: ${deviceId}, Trạng thái: ${deviceStatus}`
                            });
                            alert('Thiết bị đã được cập nhật.');
                            document.getElementById('deviceId').value = '';
                        })
                        .catch(error => {
                            console.error('Lỗi cập nhật thiết bị:', error);
                            alert('Có lỗi xảy ra khi cập nhật thiết bị.');
                        });
                } else {
                    alert('Vui lòng nhập ID thiết bị.');
                }
            }
        }

        function scheduleMaintenance() {
            if (confirm('Bạn có chắc muốn lên lịch bảo trì?')) {
                const maintenanceDate = document.getElementById('maintenanceDate').value;
                if (maintenanceDate) {
                    maintenanceRef.set({
                        date: maintenanceDate,
                        status: 'scheduled'
                    })
                    .then(() => {
                        activityLogRef.push({
                            timestamp: Date.now(),
                            action: 'Lên lịch bảo trì',
                            details: `Ngày: ${maintenanceDate}`
                        });
                        checkMaintenanceStatus();
                        alert('Lịch bảo trì đã được lên.');
                        document.getElementById('maintenanceDate').value = '';
                    })
                    .catch(error => {
                        console.error('Lỗi lên lịch bảo trì:', error);
                        alert('Có lỗi xảy ra khi lên lịch bảo trì.');
                    });
                } else {
                    alert('Vui lòng chọn ngày bảo trì.');
                }
            }
        }

        function updateUserRole() {
            if (confirm('Bạn có chắc muốn cập nhật quyền người dùng?')) {
                const userEmail = document.getElementById('userEmail').value.trim();
                const userRole = document.getElementById('userRole').value;
                if (userEmail && currentUserRole === 'admin') {
                    usersRef.child(userEmail).update({
                        role: userRole,
                        timestamp: Date.now()
                    })
                    .then(() => {
                        activityLogRef.push({
                            timestamp: Date.now(),
                            action: 'Cập nhật quyền người dùng',
                            details: `Email: ${userEmail}, Quyền: ${userRole}`
                        });
                        alert('Quyền người dùng đã được cập nhật.');
                        document.getElementById('userEmail').value = '';
                    })
                    .catch(error => {
                        console.error('Lỗi cập nhật quyền:', error);
                        alert('Có lỗi xảy ra khi cập nhật quyền.');
                    });
                } else {
                    alert('Chỉ Admin có thể cập nhật quyền hoặc vui lòng nhập email.');
                }
            }
        }

        function exportExcel() {
            if (confirm('Bạn có chắc muốn xuất báo cáo Excel?')) {
                const data = originalData.map(r => ({
                    Timestamp: r[0],
                    Nhiet_do: r[1],
                    Do_am: r[2],
                    CO: r[3],
                    PM25: r[4],
                    PM10: r[5],
                    CO2: r[6]
                }));
                const ws = XLSX.utils.json_to_sheet(data);
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, "Dữ liệu");
                XLSX.writeFile(wb, 'bao_cao_du_lieu.xlsx');
            }
        }

        function editUser(email) {
            if (currentUserRole !== 'admin') {
                alert('Chỉ Admin có thể chỉnh sửa quyền.');
                return;
            }
            if (confirm('Bạn có chắc muốn chỉnh sửa quyền cho người dùng này?')) {
                const newRole = prompt('Nhập quyền mới (admin/editor/viewer):', '');
                if (newRole && ['admin', 'editor', 'viewer'].includes(newRole)) {
                    usersRef.child(email).update({
                        role: newRole,
                        timestamp: Date.now()
                    })
                    .then(() => {
                        activityLogRef.push({
                            timestamp: Date.now(),
                            action: 'Chỉnh sửa quyền người dùng',
                            details: `Email: ${email}, Quyền mới: ${newRole}`
                        });
                        alert('Quyền đã được cập nhật.');
                    })
                    .catch(error => {
                        console.error('Lỗi chỉnh sửa quyền:', error);
                        alert('Có lỗi xảy ra khi chỉnh sửa quyền.');
                    });
                } else {
                    alert('Quyền không hợp lệ.');
                }
            }
        }

        function deleteUser(email) {
            if (currentUserRole !== 'admin') {
                alert('Chỉ Admin có thể xóa người dùng.');
                return;
            }
            if (confirm('Bạn có chắc muốn xóa người dùng này? Hành động này không thể hoàn tác!')) {
                usersRef.child(email).remove()
                    .then(() => {
                        activityLogRef.push({
                            timestamp: Date.now(),
                            action: 'Xóa người dùng',
                            details: `Email: ${email}`
                        });
                        alert('Người dùng đã được xóa.');
                    })
                    .catch(error => {
                        console.error('Lỗi xóa người dùng:', error);
                        alert('Có lỗi xảy ra khi xóa người dùng.');
                    });
            }
        }
    </script>
</body>
</html>
